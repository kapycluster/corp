// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: kubeconfig.proto

package kubeconfig

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KubeConfigService_GetKubeConfig_FullMethodName = "/kubeconfig.KubeConfigService/GetKubeConfig"
)

// KubeConfigServiceClient is the client API for KubeConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubeConfigServiceClient interface {
	GetKubeConfig(ctx context.Context, in *GetKubeConfigRequest, opts ...grpc.CallOption) (*GetKubeConfigResponse, error)
}

type kubeConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKubeConfigServiceClient(cc grpc.ClientConnInterface) KubeConfigServiceClient {
	return &kubeConfigServiceClient{cc}
}

func (c *kubeConfigServiceClient) GetKubeConfig(ctx context.Context, in *GetKubeConfigRequest, opts ...grpc.CallOption) (*GetKubeConfigResponse, error) {
	out := new(GetKubeConfigResponse)
	err := c.cc.Invoke(ctx, KubeConfigService_GetKubeConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubeConfigServiceServer is the server API for KubeConfigService service.
// All implementations must embed UnimplementedKubeConfigServiceServer
// for forward compatibility
type KubeConfigServiceServer interface {
	GetKubeConfig(context.Context, *GetKubeConfigRequest) (*GetKubeConfigResponse, error)
	mustEmbedUnimplementedKubeConfigServiceServer()
}

// UnimplementedKubeConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKubeConfigServiceServer struct {
}

func (UnimplementedKubeConfigServiceServer) GetKubeConfig(context.Context, *GetKubeConfigRequest) (*GetKubeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubeConfig not implemented")
}
func (UnimplementedKubeConfigServiceServer) mustEmbedUnimplementedKubeConfigServiceServer() {}

// UnsafeKubeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubeConfigServiceServer will
// result in compilation errors.
type UnsafeKubeConfigServiceServer interface {
	mustEmbedUnimplementedKubeConfigServiceServer()
}

func RegisterKubeConfigServiceServer(s grpc.ServiceRegistrar, srv KubeConfigServiceServer) {
	s.RegisterService(&KubeConfigService_ServiceDesc, srv)
}

func _KubeConfigService_GetKubeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServiceServer).GetKubeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeConfigService_GetKubeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServiceServer).GetKubeConfig(ctx, req.(*GetKubeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KubeConfigService_ServiceDesc is the grpc.ServiceDesc for KubeConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubeConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kubeconfig.KubeConfigService",
	HandlerType: (*KubeConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKubeConfig",
			Handler:    _KubeConfigService_GetKubeConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kubeconfig.proto",
}

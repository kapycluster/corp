// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: kubeconfig.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KubeConfig_GetKubeConfig_FullMethodName = "/proto.KubeConfig/GetKubeConfig"
)

// KubeConfigClient is the client API for KubeConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubeConfigClient interface {
	GetKubeConfig(ctx context.Context, in *KubeConfigRequest, opts ...grpc.CallOption) (*KubeConfigData, error)
}

type kubeConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewKubeConfigClient(cc grpc.ClientConnInterface) KubeConfigClient {
	return &kubeConfigClient{cc}
}

func (c *kubeConfigClient) GetKubeConfig(ctx context.Context, in *KubeConfigRequest, opts ...grpc.CallOption) (*KubeConfigData, error) {
	out := new(KubeConfigData)
	err := c.cc.Invoke(ctx, KubeConfig_GetKubeConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubeConfigServer is the server API for KubeConfig service.
// All implementations must embed UnimplementedKubeConfigServer
// for forward compatibility
type KubeConfigServer interface {
	GetKubeConfig(context.Context, *KubeConfigRequest) (*KubeConfigData, error)
	mustEmbedUnimplementedKubeConfigServer()
}

// UnimplementedKubeConfigServer must be embedded to have forward compatible implementations.
type UnimplementedKubeConfigServer struct {
}

func (UnimplementedKubeConfigServer) GetKubeConfig(context.Context, *KubeConfigRequest) (*KubeConfigData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubeConfig not implemented")
}
func (UnimplementedKubeConfigServer) mustEmbedUnimplementedKubeConfigServer() {}

// UnsafeKubeConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubeConfigServer will
// result in compilation errors.
type UnsafeKubeConfigServer interface {
	mustEmbedUnimplementedKubeConfigServer()
}

func RegisterKubeConfigServer(s grpc.ServiceRegistrar, srv KubeConfigServer) {
	s.RegisterService(&KubeConfig_ServiceDesc, srv)
}

func _KubeConfig_GetKubeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KubeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServer).GetKubeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeConfig_GetKubeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServer).GetKubeConfig(ctx, req.(*KubeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KubeConfig_ServiceDesc is the grpc.ServiceDesc for KubeConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubeConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.KubeConfig",
	HandlerType: (*KubeConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKubeConfig",
			Handler:    _KubeConfig_GetKubeConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kubeconfig.proto",
}

package dashboard

import (
	"fmt"
	"github.com/kapycluster/corpy/panel/kube"
	"github.com/kapycluster/corpy/panel/views/components"
	"github.com/kapycluster/corpy/panel/views/components/icons"
	"github.com/markbates/goth"
)

func logoutURL(provider string) string {
	return fmt.Sprintf("auth/%s/logout", provider)
}

templ ControlPlanes(user goth.User, controlPlanes []*kube.ControlPlane) {
	@components.Base() {
		@NavHeader(
			HeaderProps{
				Avatar: user.AvatarURL,
				User:   user.Name,
				Links: []components.DropdownItem{
					{Name: "Logout", URL: logoutURL(user.Provider)},
				},
			},
			NavProps{
				Title: "Dashboard",
				Items: []NavItem{
					{Icon: icons.Wheel(4), Name: "Control Planes", URL: "/controlplanes", Current: true},
					{Icon: icons.Settings(4), Name: "Access Control", URL: "/access"},
					{Icon: icons.Settings(4), Name: "Settings", URL: "/settings"},
				},
			},
		)
		@MainSection("Control Planes",
			"Manage your control planes. You can access your join URLs and kubeconfigs from here.") {
			<div class="flex flex-col pt-10">
				<div class="-m-1.5 overflow-x-auto">
					<div class="p-1.5 min-w-full inline-block align-middle">
						<div class="overflow-hidden">
							<table class="min-w-full divide-y divide-gray-200 dark:divide-neutral-700">
								<thead>
									<tr>
										<th scope="col" class="px-1 py-3 text-start text-sm font-medium text-gray-500 uppercase dark:text-neutral-500">Name</th>
										<th scope="col" class="px-1 py-3 text-start text-sm font-medium text-gray-500 uppercase dark:text-neutral-500">Status</th>
										<th scope="col" class="px-1 py-3 text-start text-sm font-medium text-gray-500 uppercase dark:text-neutral-500">Join URL</th>
										<th scope="col" class="px-1 py-3 text-start text-sm font-medium text-gray-500 uppercase dark:text-neutral-500">Version</th>
									</tr>
								</thead>
								<tbody class="divide-y divide-gray-200 dark:divide-neutral-700">
									for _, controlPlane := range controlPlanes {
										<tr class="hover:bg-light-0">
											@controlPlaneRow(controlPlane)
										</tr>
									}
								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
		}
	}
}

templ controlPlaneRow(controlPlane *kube.ControlPlane) {
	<td class="px-1 py-4 whitespace-nowrap text-lg font-medium text-gray-800 dark:text-neutral-200">
		{ controlPlane.Name }
	</td>
	<td class="px-1 py-4 whitespace-nowrap text-lg font-medium text-gray-800 dark:text-neutral-200">
		{ controlPlane.Status }
	</td>
	<td class="px-1 py-4 whitespace-nowrap text-lg font-medium text-gray-800 dark:text-neutral-200">
		<span class="text-xs font-mono">foo.kapy.sh/join/</span><span class="font-mono text-sm">{ controlPlane.ID }</span>
	</td>
	<td class="px-1 py-4 whitespace-nowrap text-lg font-medium text-gray-800 dark:text-neutral-200">
		{ controlPlane.Version }
	</td>
	<td class="px-1 py-4 whitespace-nowrap text-lg font-medium text-gray-800 dark:text-neutral-200">
		@components.Dropdown(components.DropdownProps{
			Items: []components.DropdownItem{
				{Name: "Download kubeconfig", URL: fmt.Sprintf("/controlplanes/%s/edit", controlPlane.ID)},
				{Name: "Delete", URL: fmt.Sprintf("/controlplanes/%s/delete", controlPlane.ID)},
			},
			Button: components.CleanButton(components.ButtonProps{
				Text: "",
				Icon: icons.Ellipsis(4),
			}),
		})
	</td>
}

templ CreateControlPlaneForm() {
	<header class="flex gap-2">
		<div class="flex-grow">
			<h1 class="mb-2">
				Create a Control Plane
			</h1>
			<p class="text-gray-600 text-xl">
				Create a new control plane to manage your Kubernetes cluster.
			</p>
		</div>
	</header>
	<form id="create-controlplane-form" onkeydown="if(event.keyCode === 13) {event.preventDefault();}">
		<div class="grid grid-cols-1 grid-gap-4 pt-20">
			@components.NamedInput("Name",
				"Name of the control plane. Think of this as the name of your Kubernetes cluster.")
		</div>
		<div class="flex justify-start gap-4">
			@components.Button(components.ButtonProps{
				Text: "Create",
				Attrs: templ.Attributes{
					"type":    "submit",
					"hx-post": "/controlplanes/create",
				},
				Class: "mt-10",
			})
			@components.GrayButton(components.ButtonProps{
				Text: "Cancel",
				Attrs: templ.Attributes{
					"hx-get": "/controlplanes",
					"hx-swap": "outerHTML",
					"hx-target": "body",
					"hx-replace-url": "true",
				},
				Class: "mt-10",
			})
		</div>
	</form>
}
